# Generic .travis.yml file for running continuous integration on Travis-CI for
# any ROS package.
#
# Available here:
#   - http://felixduvallet.github.io/ros-travis-integration
#   - https://github.com/felixduvallet/ros-travis-integration
#
# This installs ROS on a clean Travis-CI virtual machine, creates a ROS
# workspace, resolves all listed dependencies, and sets environment variables
# (setup.bash). Then, it compiles the entire ROS workspace (ensuring there are
# no compilation errors), and runs all the tests. If any of the compilation/test
# phases fail, the build is marked as a failure.
#
# We handle two types of package dependencies specified in the package manifest:
#   - system dependencies that can be installed using `rosdep`, including other
#     ROS packages and system libraries. These dependencies must be known to
#     `rosdistro` and get installed using apt-get.
#   - package dependencies that must be checked out from source. These are handled by
#     `wstool`, and should be listed in a file named dependencies.rosinstall.
#
# There are two variables you may want to change:
#   - ROS_DISTRO (default is indigo). Note that packages must be available for
#     ubuntu 14.04 trusty.
#   - ROSINSTALL_FILE (default is dependencies.rosinstall inside the repo
#     root). This should list all necessary repositories in wstool format (see
#     the ros wiki). If the file does not exists then nothing happens.

# NOTE: The build lifecycle on Travis.ci is something like this:
#    before_install
#    install
#    before_script
#    script
#    after_success or after_failure
#    after_script
#    OPTIONAL before_deploy
#    OPTIONAL deploy
#    OPTIONAL after_deploy

################################################################################

# Use ubuntu trusty (14.04) with sudo privileges.
dist: trusty
sudo: required
language: generic
cache:
- apt
notifications:
  email: false
  slack:
    rooms:
    - secure: G2L5JKwfhmF73vQUVQgLTuvF6IV3kH3VOF6CeMme5MHeH9ABf+dD4snzZAGsHVhH3YkyL+wS6oHgIvHPeLb4l0nDwYl7zYltW8xbILNh/d0GcY9OwwkL297575gW/1p6LxUZGOocR7W5SDcN84CLu+lkqhsCLl1bN5iGG9rU52mf8lYuuJ2HnogfA0Qkv0x6FY1ycAsHmZtICyShZKZk+08XohVUQRpFP2wAI+K6oF4VlrLsYeFPYjGCh/X8ZyGmb9FBLg6boNIKb3vK4yrNX2VWm0gJWhH6JwtQZmw6FNoSz1ioBAOyBaKvaZfGmajFyJYvLb3jKf0jeQunwHdtP5XU7a5u7DnoaFNXNLDguucLjfK9zrGyL8WQRju8uw4isVK1pd+WLAv9p7FgD78LhmQNDrhSRrCKBJwOFAu+ljIiJWbQ+1hm1XZdhlV/qCiFq1SZwBw+cdybpBXQ+GxhlkhkoG5eOgkymGGR/H2U+bPl63WDBTIv1rOb+BLkxnd8rB7Zr4BgupUcFYSh5u3dZHJuLe2A3S1XvLWS4/8uzlaJXdCT+zs8BlZh602bIvfR0g6vfexDJt3rXUsyuqKAfGr9f7L0Tm4RWOhusBDvrYrn7bPE3qoX5uNxn5pbvI8W/kvv+HUYb0f7COJqCidQl6XvzWDRQvKs2EKXkr7p0ZU=
    on_success: change
    on_failure: always

# Configuration variables. All variables are global now, but this can be used to
# trigger a build matrix for different ROS distributions if desired.
env:
  global:
  - ROS_DISTRO=indigo
  - ROS_CI_DESKTOP="`lsb_release -cs`"
  - CI_SOURCE_PATH=$(pwd)
  - ROSINSTALL_FILE=$CI_SOURCE_PATH/dependencies.rosinstall
  - CATKIN_OPTIONS=$CI_SOURCE_PATH/catkin.options
  - ROS_PARALLEL_JOBS='-j8 -l6'
  - REPO_NAME=baxter_react_controller
  - IPOPT_DIR=~/src/ipopt/build
  - secure: An4Sq55uKyc88eXy3csarwZh0isdFRH6EZtJCPc5d4rpddPxtCcUFIx7Hk74a/EwlQZTg1pkmyNiew+J88kGCPc62rM5Mj99pMxUf5FkqBAP5VJIAGy0m9Ehnd1PsuxWQ2BBxUr/HzWqvh/GZ2E82eqMIT4jQpmcQUszzseZyY58H3gO0vLvzAQbNcjkCQnMUZNt8n6OLTZIj9nvSDk0Zq9DnOaJdmhcxO68wwYir0wa9L0JtYWbBCn3G809gQIQQNiEvhPV7T1M5vOa4sOaqStzLXKkklR0MLpq//7t7iSUuPllMWr0Vv+VPPCzn7cwRcMeBlw+7xxtA0hKyezQqSV5/7HHuaMPBVUl4UHvv9C2uV437bEEot1JO6X1PsvWP6+CJpYm0iOf6geNCAC5ULbZB4+l+wlhenjUJRJBE4/im0tnEXpmRDEO3GDqoecDVqWbd+pjwdPuUbxgUeGBaZhzCFbdtTUzJkTG32vu+niw812RgZodkDkuWhSv/JvYqoUCpW172eAFPlhgs5/gPgNfUeU2faE/aGHMTv3zqWDO2oVW9ZLpqdFl1Z/A9wUR5tkDMITOgY3pH2yZrSvk2eBNDRUpBu1HSLbVaZBrkl1EnwYa+II2g6LnEyT6GtNHhOc/NsCCQeY8CddYKos6coicRlfV1Kzon7HSGwyGbLY=

# Build matrix
matrix:
  include:
  - os: linux
    compiler: g++-4.9
    env: CTEST_TARGET_SYSTEM=Linux-gcc CTEST_MODEL=Nightly CXX=g++-4.9 CC=gcc-4.9
    addons:
      apt:
        packages:
        - g++-4.9
        - libgfortran-4.9-dev
        sources: &1
        - ubuntu-toolchain-r-test
        # - llvm-toolchain-trusty
  # - os: linux
  #   compiler: clang-3.6
  #   env: CTEST_TARGET_SYSTEM=Linux-gcc CTEST_MODEL=Nightly CXX=clang++-3.6 CC=clang-3.6
  #   addons:
  #     apt:
  #       packages:
  #       - clang-3.6
  #       sources: *1

################################################################################

# Install system dependencies, namely a very barebones ROS setup.
before_install:
- sudo sh -c "echo \"deb http://packages.ros.org/ros/ubuntu $ROS_CI_DESKTOP main\" > /etc/apt/sources.list.d/ros-latest.list"
- wget http://packages.ros.org/ros.key -O - | sudo apt-key add -
- sudo apt-get update -qq
- sudo apt-get install -y python-catkin-tools python-rosdep python-wstool ros-$ROS_DISTRO-catkin libnlopt-dev liblapack-dev gfortran ros-indigo-robot-state-publisher
- source /opt/ros/$ROS_DISTRO/setup.bash
# Prepare rosdep to install dependencies.
- sudo rosdep init
- rosdep update
# Install IPOPT, compile it and set the proper environment variable
- mkdir ~/src
- cd ~/src
- svn co --trust-server-cert --non-interactive https://projects.coin-or.org/svn/Ipopt/stable/3.12 ipopt
- mkdir $IPOPT_DIR
- cd $IPOPT_DIR/../ThirdParty
- cd ASL    && ./get.ASL    && cd ../
- cd Blas   && ./get.Blas   && cd ../
- cd Lapack && ./get.Lapack && cd ../
- cd Metis  && ./get.Metis  && cd ../
- cd Mumps  && ./get.Mumps  && cd ../
- cd $IPOPT_DIR
- "../configure"
- make -j8
- sudo make install

# Create a catkin workspace with the package under integration.
install:
- mkdir -p ~/catkin_ws/src
- cd ~/catkin_ws/ && catkin init
- cd ~/catkin_ws/ && catkin build
- source devel/setup.bash
- cd ~/catkin_ws/src && ln -s $CI_SOURCE_PATH .

# Install all dependencies, using wstool first and rosdep second.
# wstool looks for a ROSINSTALL_FILE defined in the environment variables.
before_script:
# source dependencies: install using wstool.
- cd ~/catkin_ws/src && wstool init
- if [[ -f $ROSINSTALL_FILE ]] ; then wstool merge $ROSINSTALL_FILE ; fi
- cd ~/catkin_ws/src && wstool up
# package depedencies: install using rosdep.
- cd ~/catkin_ws && ls src
- rosdep install -y --from-paths src --ignore-src --rosdistro $ROS_DISTRO

# Compile and test (mark the build as failed if any step fails). If the
# CATKIN_OPTIONS file exists, use it as an argument to catkin_make, for example
# to blacklist certain packages.
#
# NOTE on testing: `catkin_make run_tests` will show the output of the tests
# (gtest, nosetest, etc..) but always returns 0 (success) even if a test
# fails. Running `catkin_test_results` aggregates all the results and returns
# non-zero when a test fails (which notifies Travis the build failed).
script:
- source /opt/ros/$ROS_DISTRO/setup.bash
- cd ~/catkin_ws
# To remove this -> libdc1394 error: Failed to initialize libdc1394
- sudo ln /dev/null /dev/raw1394
# Build the repo
- catkin build $REPO_NAME $( [ -f $CATKIN_OPTIONS ] && cat $CATKIN_OPTIONS )
# Run the tests, ensuring the path is set correctly.
- source devel/setup.bash
- catkin build $REPO_NAME --catkin-make-args run_tests
- catkin_test_results build/$REPO_NAME || (cat build/$REPO_NAME/test_results/$REPO_NAME/*.xml ; false)

after_success:
  # Run build on Docker Hub
  - |-
    curl -H "Content-Type: application/json" --data '{"source_type": "Branch", "source_name": "'$TRAVIS_BRANCH'"}' -X POST $DOCKER_PUSH_URL
